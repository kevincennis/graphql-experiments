schema {
  query: Query,
  mutation: Mutation
}

type Query {
  "Find users"
  users(skip: Int, limit: Int): [ User ],

  "Find a user by _id"
  user(_id: ObjectId!): User,

  "Find addresses"
  addresses(skip: Int, limit: Int): [ Address ],

  "Find an address by _id"
  address(_id: ObjectId!): Address,

  "Find cities"
  cities(skip: Int, limit: Int): [ City ],

  "Find a city by _id"
  city(_id: ObjectId!): City
}

type Mutation {
  "Create a city"
  createCity(name: String, state: String): City,

  "Create an address"
  createAddress(house_number: String, street: String, city_id: ObjectId): Address,

  "Create a user"
  createUser(name: String, email: String, address_id: ObjectId): User
}

# Custom scalar types
scalar Date
scalar ObjectId

"""
A user record
"""
type User {
  "Primary key"
  _id: ObjectId!,
  "Full name"
  name: String,
  "Email address"
  email: String,
  "Address foreign key"
  address_id: ObjectId,
  "Address"
  address: Address,
  "Record creation date"
  created: Date,
  "Record last updated date"
  updated: Date
}

"""
An address recrd
"""
type Address {
  "Primary key"
  _id: ObjectId!,
  "House number"
  house_number: String,
  "Street name"
  street: String,
  "City foreign key"
  city_id: ObjectId,
  "City"
  city: City,
  "Users who live at the this address"
  residents: [ User ],
  "Record creation date"
  created: Date,
  "Record last updated date"
  updated: Date
}

"""
A city record
"""
type City {
  "Primary key"
  _id: ObjectId!,
  "City name"
  name: String,
  "State"
  state: String,
  "Addresses in this city"
  addresses: [ Address ],
  "Record creation date"
  created: Date,
  "Record last updated date"
  updated: Date
}
